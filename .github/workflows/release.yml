name: Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: Run tests
      run: cargo test --verbose
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  build-release:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: mksub-rs-linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: mksub-rs-linux-amd64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: mksub-rs-linux-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: mksub-rs-windows-amd64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: mksub-rs-darwin-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: mksub-rs-darwin-arm64

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        fi

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/mksub-rs
        elif [[ "${{ matrix.target }}" != *"musl"* ]]; then
          strip target/${{ matrix.target }}/release/mksub-rs
        fi

    - name: Rename binary
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/mksub-rs.exe ${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/mksub-rs ${{ matrix.name }}
        fi
      shell: bash

    - name: Create tarball (Unix)
      if: matrix.os != 'windows-latest'
      run: tar czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}

    - name: Create zip (Windows)
      if: matrix.os == 'windows-latest'
      run: Compress-Archive -Path ${{ matrix.name }} -DestinationPath ${{ matrix.name }}.zip

    - name: Upload artifact (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}.tar.gz
        path: ${{ matrix.name }}.tar.gz

    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}.zip
        path: ${{ matrix.name }}.zip

  release:
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*.{tar.gz,zip}
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
